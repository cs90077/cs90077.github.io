[{"categories":[],"content":"使用mailto發送 字串拼接格式：\n「mailto:abc@mail.com?subject=我是標題\u0026amp;body=我是內容」   收件人：用 “ , “ 分開 副本：cc 密件副本：bcc 標題：subject 內容：body  1@IBAction func donePressed(_ sender: Any) { 2 sendEmail() 3} 4 5func sendEmail() { 6 let email = \u0026#34;cs90077@gmail.com\u0026#34; 7 let subject = \u0026#34;我是標題\u0026#34; 8 let body = \u0026#34;我是內容\\r\\n第二個內容\u0026#34; 9 10 let mailtoString = \u0026#34;mailto:\\(email)?subject=\\(subject)\u0026amp;body=\\(body)\u0026#34;.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) 11 if let url = URL(string: mailtoString ?? \u0026#34;\u0026#34;) { 12 if #available(iOS 10.0, *) { 13 UIApplication.shared.open(url) 14 } else { 15 UIApplication.shared.openURL(url) 16 } 17 } 18} 使用MFMailComposeViewController step 1 import 1import MessageUI step 2 func 1@IBAction func donePressed(_ sender: Any) { 2 showMailComposer() 3} 4 5func showMailComposer() { 6 guard MFMailComposeViewController.canSendMail() else { 7 return 8 } 9 let composer = MFMailComposeViewController() 10 composer.mailComposeDelegate = self 11 composer.setToRecipients([\u0026#34;cs90077@gmail.com\u0026#34;]) 12 composer.setSubject(\u0026#34;我是標題\u0026#34;) 13 composer.setMessageBody(\u0026#34;我是內容\\r\\n第二個內容\u0026#34;, isHTML: false) 14 present(composer, animated: true) 15} 16 step 3 delegate 1extension ViewController: MFMailComposeViewControllerDelegate { 2 3 func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) { 4 if let _ = error { 5 controller.dismiss(animated: true, completion: nil) 6 return 7 } 8 9 switch result { 10 case .cancelled: 11 break 12 case .failed: 13 break 14 case .saved: 15 break 16 case .sent: 17 break 18 } 19 controller.dismiss(animated: true, completion: nil) 20 } 21 22} 驗證Email格式 1+ (BOOL)validateEmailWithString:(NSString *)email { 2 NSString *emailRegExp = @\u0026#34;[A-Z0-9a-z._+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\u0026#34;; 3 NSPredicate *emailTest = [NSPredicate predicateWithFormat:@\u0026#34;SELF MATCHES %@\u0026#34;, emailRegExp]; 4 return [emailTest evaluateWithObject:email]; 5} issue 目前測試發現，使用mailto的方法，目前在iOS 14.6中，「 \\r\\n 」無法做出換行效果，會顯示成，而使用MFMailComposeViewController則無此問題\n[Mailto url encoding issue iOS 14.6] ","date":"Aug 31, 2021","img":"","permalink":"/posts/ios/swift/send_email/","series":["iOS"],"tags":["Swift","URL"],"title":"[Swift]兩種發送Email的方法"},{"categories":[],"content":"調整奇耙的文字屬性設定\n修改特定文字顏色屬性 1var hours =19 2var title = \u0026#34;你有 \\(hours)分 可以折抵，要使用嗎？\u0026#34; 3 4let range: Range\u0026lt;String.Index\u0026gt; = title.range(of:\u0026#34; \u0026#34;)! 5let index: Int = title.distance(from: title.startIndex, to: range.lowerBound) + 1 6let length: Int = hours.description.count + 1 // 包含 “分” 7 8let attributedString = NSMutableAttributedString(string: title, attributes: [ 9 .font: UIFont(name: \u0026#34;PingFangTC-Regular\u0026#34;, size: 14.0)!, 10 .foregroundColor: UIColor.black, 11 .kern: 0.0 12]) 13 14attributedString.addAttributes([ 15 .font: UIFont(name: \u0026#34;PingFangTC-Medium\u0026#34;, size: 14.0)!, 16 .foregroundColor: UIColor.mainBlue 17], range: NSRange(location: index, length: length)) 18 19subtitleLabel.attributedText = attributedString ","date":"Aug 17, 2021","img":"/images/posts/swift_attribute_text_2.png","permalink":"/posts/ios/swift/attribute_%E5%AE%A2%E8%A3%BD%E5%8C%96%E6%96%87%E5%AD%97%E5%B1%AC%E6%80%A7/","series":["iOS"],"tags":["Swift","Attribute"],"title":"[Swift]Attribute 客製化文字屬性"},{"categories":[],"content":"調整各種文字屬性\n底線  按鈕添加底線  1@IBOutlet weak var partialDiscountButton: UIButton! { 2 didSet { 3 let title = \u0026#34;部分折抵\u0026#34; 4 let yourAttributes: [NSAttributedString.Key: Any] = [ 5 .font: UIFont.boldSystemFont(ofSize: 14), 6 .foregroundColor: UIColor.gray, 7 .underlineStyle: NSUnderlineStyle.single.rawValue] 8 let attributeString = NSMutableAttributedString(string: title, 9 attributes: yourAttributes) 10 partialDiscountButton.setAttributedTitle(attributeString, for: .normal) 11 } 12} ","date":"Aug 17, 2021","img":"","permalink":"/posts/ios/swift/attribute_text/","series":["iOS"],"tags":["Swift","Attribute"],"title":"[Swift]Attribute文字屬性的應用"},{"categories":[],"content":"當資料有重複，想整理出不重複的資料，以下提供兩種方式給大家參考！\n傳統方法：使用for迴圈 1let array = [100, 200, 300 , 400 , 500, 100] 2// Prints [100, 200, 300, 400, 500, 100] 3var newArray: [Int] = [] 4 5for value in array { 6 if (newArray.contains(value)) { 7 continue 8 } 9 newArray.append(value) 10} 11 12print(newArray) 13// Prints [100, 200, 300, 400, 500] 進階方法：使用Filter函式 1extension Array where Element: Hashable { 2 3 func removeDuplicateElement() -\u0026gt; [Element] { 4 var elementSet = Set() 5 6 return filter { 7 elementSet.update(with: $0) == nil 8 } 9 } 10} 11 12let array = [100, 200, 300 , 400 , 500, 100] 13let newArray = array.removeDuplicateElement() 14 15print(newArray) 16// Prints [100, 200, 300, 400, 500] ","date":"Aug 1, 2021","img":"","permalink":"/posts/ios/swift/array_%E5%8F%96%E5%BE%97%E4%B8%8D%E9%87%8D%E8%A4%87%E8%B3%87%E6%96%99/","series":["iOS"],"tags":["Swift","Array"],"title":"[Swift]\u0008Array取得不重複資料"},{"categories":null,"content":"小時候不懂讀書學習竅門，每天開心體驗生活，成績常駐倒數第三名。\n上高中剛好坐在學霸身邊，於是開起外掛模式，成績突飛猛進，達成文武雙全。\n- 學科: 統一入學測驗 水產類組 全校第二名 - 術科: 高職技藝競賽 漁業職種 全國第五名  已知在大學畢業後即將步入社會，所幸在此期間裡不斷地找尋各種機會可能\n大學時，為了進一步提升自己的人際關係以及團隊合作能力，有幸與學長合作共同創辦社團，擔任社長職位，且在創社三年拿到「社團評鑑 優等」殊榮。\n大學畢業前夕，考取「動力小船營業執照」以及「風浪板教練」，目標要去愛河當個遊艇船長。\n在因緣際會下認識朋友資工系的哥哥，看他如同駭客般敲鍵盤跑出一堆程式碼，覺得當工程師也太酷了，哥哥也與我分享工程師人材年薪百萬不是夢，足以克服現今社會低薪的問題。\n於是畢業後，毅然決然至「資策會」學習程式入門。在往後的半年裡，全心投入學習，課程結束時也發表三人合作開發的ERP+APP小作品，並且Android App是由自己獨立開發。\n- 2012年 六個月學習寫程式，從新手到入門，結訓發表小專題 - 2013年 四個月獨立開發政府Android APP，獲得肝指數過高 - 2014年 轉行當健身教練，重拾健康的身軀 - 2016年 重頭學習寫程式，系統性ERP開發 - 2017年 負責保全系Android APP開發，利用空閒時間學習Swift，完成同規格iOS APP開發。 - 2019年 台南\u0026gt;\u0026gt;年薪80萬   2014年 肝指數過高，轉行當健身教練，重拾健康的身軀  感謝 身邊所有朋友\n因為有你們的互相扶持成長\n才會有現在的我\n越努力，越幸運\n相信未來會越來越棒的！\n","date":"Jul 31, 2021","img":"","permalink":"/about/","series":null,"tags":null,"title":"關於我"},{"categories":[],"content":"色碼轉換器  將 RGB 轉換成 HEX 將 HEX 轉換成 RGB  使用RGB 1UIColor(red: 120.0 / 255.0, green: 125 / 255.0, blue: 112.0 / 255.0, alpha: 1) Extension 1extension UIColor { 2 3 static func RGBA(r: Float, g: Float , b: Float , a: Float) -\u0026gt; UIColor 4 { 5 return UIColor.init(red: CGFloat(CGFloat(r)/255.0), green: CGFloat(CGFloat(g)/255.0), blue: CGFloat(CGFloat(b)/255.0), alpha: CGFloat(a)) 6 } 7 8} 9 10// use 11let greyColor = UIColor.RGBA(r: 88, g: 91, b: 96, a: 1) 使用Asset Add Color Set  設定使用Hex   設定使用RGB  Extension 1 2extension UIColor { 3 4 @nonobjc class var black70: UIColor { 5 return UIColor(red: 19.0 / 255.0, green: 20.0 / 255.0, blue: 21.0 / 255.0, alpha: 0.6) 6 } 7 8} 9 10// use 11var black70 = UIColor(named: \u0026#34;black70\u0026#34;) 12 13black70 = UIColor.black70 14 15black70 = .black70 ","date":"Jun 6, 2021","img":"","permalink":"/posts/ios/swift/color_rgb/","series":["iOS"],"tags":["Swift","UIColor"],"title":"[Swift]UIColor RGB顏色的使用"},{"categories":[],"content":"Apple官方下載連結\n下載連結 More Downloads Xcodes 推薦使用Xcodes這個軟體，會列出所有目前已開放的版本\n","date":"Feb 14, 2021","img":"","permalink":"/posts/xcode/xcode_download/","series":["macOS"],"tags":["Xcode"],"title":"下載Xcode開發工具"},{"categories":[],"content":"超實用的，一轉眼清了40幾G\n透過指令 1rm -rf ~/Library/Developer/Xcode/Archives/ 2rm -rf ~/Library/Developer/Xcode/DerivedData/ 3rm -rf ~/Library/Developer/Xcode/iOS DeviceSupport/ 4rm -rf ~/Library/Developer/Xcode/Products/ 5rm -rf ~/Library/Developer/CoreSimulator/Devices/ 6rm -rf ~/Library/Developer/XCPGDevices/ DevCleaner 推薦使用DevCleaner這個軟體，幫助你一鍵清除檔案\n","date":"Feb 14, 2021","img":"","permalink":"/posts/xcode/developer_cleaner/","series":["macOS"],"tags":["Xcode"],"title":"清除Xcode肥大檔案"},{"categories":[],"content":"在 Apple Silicon M1 安裝CocoaPods套件\n基本安裝請參考：Cocopods套件管理 M1的系統架構不同，用以前的方法安裝會失敗\n需要指定x86方式安裝\n安裝套件 step1 1sudo arch -x86_64 gem install ffi step2 1arch -x86_64 pod install ","date":"Jan 25, 2021","img":"/images/icon/icon_cocoapods.png","permalink":"/posts/xcode/cocoapods_management_for_m1/","series":["iOS"],"tags":["Swift","CocoaPods","GitHub","Xcode"],"title":"安裝CocoaPods套件管理 支援M1"},{"categories":[],"content":"AppStore  RunCat: DevCleaner: Xcode工具  Homebrew 以下brew安裝方式，請參考Homebrew MacOS套件管理工具 一般軟體 常用軟體  appcleaner: 刪除軟體  1brew install --cask appcleaner  aldente: 控制電池充電  1brew install --cask aldente  bitwarden: 密碼管理  1brew install --cask bitwarden  bettertouchtool: 觸控板設定  1brew install --cask bettertouchtool  itsycal: 行事曆小程式  1brew install --cask itsycal  google-chrome  1brew install --cask google-chrome  notion: 筆記本  1brew install --cask notion  the-unarchiver: 解壓縮工具  1brew install --cask the-unarchiver  vlc: 播放器  1brew install --cask vlc 懶人包（我全都要） 1brew install --cask appcleaner 2brew install --cask aldente 3brew install --cask bitwarden 4brew install --cask bettertouchtool 5brew install --cask google-chrome 6brew install --cask itsycal 7brew install --cask notion 8brew install --cask the-unarchiver 9brew install --cask vlc 開發者 常用軟體 開發工具  xcodes  1brew install --cask xcodes  visual-studio-code  1brew install --cask visual-studio-code 封包工具  postman  1brew install --cask postman  proxyman  1brew install --cask proxyman UI工具  zeplin  1brew install --cask zeplin  colorsnapper: 螢幕取色工具  1brew install --cask colorsnapper Git工具  sourcetree  1brew install --cask sourcetree  diffmerge  1brew install --cask diffmerge 資料庫工具  sqlectron  1brew install --cask sqlectron  db-browser-for-sqlite  1brew install --cask db-browser-for-sqlite  realm-studio  1brew install --cask realm-studio 其他  iterm2: 終端機  1brew install --cask iterm2  sublime-text:  1brew install --cask sublime-text  slack  1brew install --cask slack 懶人包（我全都要） 1brew install --cask colorsnapper 2brew install --cask iterm2 3brew install --cask sublime-text 4brew install --cask sourcetree 5brew install --cask diffmerge 6brew install --cask postman 7brew install --cask zeplin 8brew install --cask visual-studio-code 9brew install --cask xcodes 10brew install --cask proxyman 11brew install --cask db-browser-for-sqlite 12brew install --cask slack 13brew install --cask sqlectron 14brew install --cask realm-studio 1brew install youtube-dl 2brew install ffmpeg ","date":"Jan 1, 2021","img":"","permalink":"/posts/macos/recommended_software/","series":["macOS"],"tags":[],"title":"MacOS 推薦實用軟體"},{"categories":[],"content":"整理一些常用到的資訊\n系統 快速更新軟體 1sudo softwareupdate -i -a 釋放記憶體 1sudo purge 自動清理記憶體  1.輸入指令：  1crontab -e   2.輸入後請按「A」，別按 Enter！\n  3.輸入文字\n  1#每30分鐘自動清空記憶體 2*/30 * * * * /usr/bin/purge  4.輸入後請按「ESC」，再按下「:」，輸入「wq」，最後按下「Enter」  預設 顯示隱藏檔案 1defaults write com.apple.finder AppleShowAllFiles true; 2killall Finder    隱藏 顯示          只顯示已打開的應用程序 1defaults write com.apple.dock static-only -boolean true; 2killall Dock 變更截圖路徑 1defaults write com.apple.screencapture location ~/Downloads/screenshot; 2defaults write com.apple.screencapture type png ","date":"Jan 1, 2021","img":"","permalink":"/posts/macos/system_setting_contents/","series":["macOS"],"tags":[],"title":"MacOS 系統設定彙整"},{"categories":null,"content":"iRent共享汽機車首創全台「24小時自助租車服務」，透過app輕鬆完成預約、取車、付款、還車，隨租隨還\n貢獻  iRent App 1.0 升級改版 2.0  示意圖 連結   [iRent 官網]   [AppStore]  ","date":"Dec 17, 2020","img":"/images/icon/app_icon_irent_2020.png","permalink":"/projects/2020/app_irent/","series":["iOS"],"tags":["APP","Swift"],"title":"IRent自助租車 APP"},{"categories":[],"content":"想要顯示目前的APP版本號\n設定檔 方法 1func getAppVersion()-\u0026gt;String { 2 var appVersion = \u0026#34;\u0026#34; 3 let version = Bundle.main.infoDictionary?[\u0026#34;CFBundleShortVersionString\u0026#34;] as! String 4 let build = Bundle.main.infoDictionary?[\u0026#34;CFBundleVersion\u0026#34;] as! String 5 appVersion = \u0026#34;\\(version)(\\(build))\u0026#34; 6 log.debug(\u0026#34;app version = \\(appVersion)\u0026#34;) 7 return appVersion 8} 效果 ","date":"Nov 6, 2020","img":"","permalink":"/posts/ios/swift/bundle_app_version/","series":["iOS"],"tags":["Swift","Bundle"],"title":"[Swift]使用Bundle取得APP版本號"},{"categories":[],"content":"想把一些重要的參數寫在info.plist設定檔裡，透過Bundle取出想要的資料\n設定檔 方法  透過Dictionary的方式，透過Key，取出對應的Value  1class ServerConfig { 2 static let SERVER_CONFIG: String = \u0026#34;Server Config\u0026#34; 3 static let HOST: String = \u0026#34;host\u0026#34; 4 static let PORT: String = \u0026#34;port\u0026#34; 5 static let REALM_VERSION: String = \u0026#34;realmVersion\u0026#34; 6 7 let host: String 8 let port: String 9 let realmVersion: String 10 11 init(){ 12 let infoPlist = Bundle.main.infoDictionary 13 let serverConfig = infoPlist![ServerConfig.SERVER_CONFIG] as? [String: String] 14 self.host = serverConfig![ServerConfig.HOST]! 15 self.port = serverConfig![ServerConfig.PORT]! 16 self.realmVersion = serverConfig![ServerConfig.REALM_VERSION]! 17 } 18} ","date":"Nov 6, 2020","img":"","permalink":"/posts/ios/swift/bundle_info_dictionary/","series":["iOS"],"tags":["Swift","Bundle"],"title":"[Swift]使用Bundle取得info資料"},{"categories":[],"content":"開啟相機 =\u0026gt; 拍照 =\u0026gt; 儲存照片 =\u0026gt; 簡單搞定\n開啟相機拍照 step 1 - 設定權限 info.plist 1Privacy - Camera Usage Description step 2 - 開啟相機 1func openCamera() { 2 let pickerController = UIImagePickerController() 3 pickerController.delegate = self 4 pickerController.mediaTypes = [\u0026#34;public.image\u0026#34;] 5 pickerController.sourceType = .camera 6 self.present(pickerController, animated: true, completion: nil) 7}  如果要多錄影功能，請添加 public.movie 屬性\n 1pickerController.mediaTypes = [\u0026#34;public.image\u0026#34;, \u0026#34;public.movie\u0026#34;] 效果    允許相機權限 相機頁面 拍照預覽頁面           step 3 - 取得Image 1extension OpenCameraViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate { 2 3 func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) { 4 5 guard let originalImage = info[.originalImage] as? UIImage else { return } 6 7 picker.dismiss(animated: true) { 8 DispatchQueue.main.async() { 9 self.previewImageView.image = originalImage 10 } 11 } 12 } 13 14}    拍照前 拍照後          拍照後儲存照片 step 1 - 設定權限 info.plist 1Privacy - Photo Library Additions Usage Description step 2 - 儲存圖片 1func saveImageToPhotos() { 2 // save 3 UIImageWriteToSavedPhotosAlbum(mainImage, nil, nil, nil) 4}  也可以在儲存成功後，顯示提醒視窗\n 1func saveImageToPhotos() { 2 // save 3 UIImageWriteToSavedPhotosAlbum(mainImage, imageSaveSuccess(), nil, nil) 4} 5 6@objc func imageSaveSuccess( 7 let alert = UIAlertController(title: \u0026#34;相片儲存\u0026#34;, message: \u0026#34;成功\u0026#34;, preferredStyle: .alert) 8 alert.addAction( UIAlertAction(title: \u0026#34;確認\u0026#34;, style: .default, handler: ni) 9 self.present(alert, animated: true, completion: nil) 10}    設定權限 儲存照片          Source Github ","date":"Sep 6, 2020","img":"","permalink":"/posts/ios/swift/imagepicker_%E9%96%8B%E5%95%9Fcamera%E7%9B%B8%E6%A9%9F%E5%8A%9F%E8%83%BD/","series":["iOS"],"tags":["Swift","ImagePicker","Camera"],"title":"[Swift]使用ImagePicker開啟Camera相機功能"},{"categories":null,"content":"本題材為模擬美國特教學校師生教學使用，老師安排課程與時段，學生則可查看課表及上課內容等資訊。\n示意圖 ","date":"Jun 14, 2020","img":"/images/icon/app_icon_american_special_education_2020.png","permalink":"/projects/2020/app_special_edu/","series":["iOS"],"tags":["APP","Objective-C"],"title":"美國特教課程 APP"},{"categories":null,"content":"此App僅供本公司之產品「BeanGo Cube 智能烘豆機」使用\n使用手機APP智慧控制烘豆機，所有烘焙曲線都儲存在手機內部並且可分享至雲端，輕鬆分享或是複製烘焙曲線，並且可依照烘焙曲線，自動執行烘培作業。\n貢獻  優化APP設計。 設計心跳模式，監聽智能烘豆機資料。 製作靜態、動態圖表，載入多組大量資料集結成的複合式折線圖。 使用Realm資料庫，提升讀寫效能。 storage處理，檔案備份、分享、匯入等。  示意圖 連結   [官方網站]   [AppStore]  ","date":"Feb 14, 2020","img":"/images/icon/app_icon_beangocube_2020.png","permalink":"/projects/2020/app_beangocube/","series":["iOS"],"tags":["APP","Swift"],"title":"BeanGo Cube 智能烘豆機"},{"categories":null,"content":"使用此APP讓學院學生與特約廠商之間擁有一個互利的方式，透過消費來取得點數，及透過點數來增加消費量，即時查詢點數餘額。\n示意圖 連結 [AppStore] ","date":"Dec 31, 2019","img":"/images/icon/app_icon_ncku_esociety_2019.png","permalink":"/projects/2019/app_ncku_esociety/","series":["iOS"],"tags":["APP","Objective-C"],"title":"NCKU FinTech商創研究中心 E-Society 特店版"},{"categories":[],"content":"基本使用 Alert 1func showAlert() { 2 let alert = UIAlertController(title: \u0026#34;請問是否要刪除！\u0026#34;, message: \u0026#34;\u0026#34;, preferredStyle: .alert) 3 4 let doneAction = UIAlertAction(title: \u0026#34;確定\u0026#34;, style: .default, handler: { action in 5 print(\u0026#34;ok\u0026#34;) 6 }) 7 8 let cancelAction = UIAlertAction(title: \u0026#34;取消\u0026#34;, style: .cancel, handler: nil) 9 10 alert.addAction(doneAction) 11 alert.addAction(cancelAction) 12 13 self.present(alert, animated: true, completion: nil) 14} Sheet 1@IBAction func donePressed(_ sender: Any) { 2 let sheet = getContactSheet() 3 self.present(sheet, animated: true, completion: nil) 4} 5 6func getContactSheet() -\u0026gt; UIAlertController { 7 let actSheet = UIAlertController(title: \u0026#34;聯絡我們\u0026#34;, message: nil, preferredStyle: .actionSheet) 8 let cancelAction = UIAlertAction(title: \u0026#34;取消\u0026#34;, style: .cancel, handler: nil) 9 let telAction = UIAlertAction(title: \u0026#34;語音客服\u0026#34;, style: .default, handler:{ action in 10 11 }) 12 let webAction = UIAlertAction(title: \u0026#34;線上客服\u0026#34;, style: .default, handler: { action in 13 14 }) 15 actSheet.addAction(cancelAction) 16 actSheet.addAction(webAction) 17 actSheet.addAction(telAction) 18 return actSheet 19} 進階 修改Title/Message文字顏色 按鈕的文字，可以透過style直接做調整 - .default: 藍字 - .cancel: 藍字、粗體 - .destructive: 紅字  1func showAlarmAlert() { 2 let title = \u0026#34;警告\u0026#34; 3 let message = \u0026#34;不是很重要的警告!\u0026#34; 4 5 let alertViewController = UIAlertController(title: title, message: message, preferredStyle: .alert) 6 7 let txtTitle = NSAttributedString( 8 string: title, 9 attributes: [ 10 NSAttributedString.Key.foregroundColor : UIColor.darkGray 11 ]) 12 13 let txtMessage = NSAttributedString( 14 string: message, 15 attributes: [ 16 NSAttributedString.Key.foregroundColor : UIColor.red 17 ]) 18 19 alertViewController.setValue(txtTitle, forKey: \u0026#34;attributedTitle\u0026#34;) 20 alertViewController.setValue(txtMessage, forKey: \u0026#34;attributedMessage\u0026#34;) 21 22 let okAction = UIAlertAction(title: \u0026#34;ok\u0026#34;, style: .default) { action in 23 print(\u0026#34;ok\u0026#34;) 24 } 25 let cancelAction = UIAlertAction(title: \u0026#34;cancel\u0026#34;, style: .destructive, handler: nil) 26 27 alertViewController.addAction(okAction) 28 alertViewController.addAction(cancelAction) 29 self.present(alertViewController, animated: true, completion: nil) 30} 調整文字訊息:靠左 message預設是置中對齊，修改成靠左對齊\n   置中（預設） 靠左對齊          1func showTextCenterAlert() { 2 let title = \u0026#34;確定名單\u0026#34; 3 let message = \u0026#34;1.Tony\\n2.Ting\\n3.hulk\\n4.ken\u0026#34; 4 5 let alertViewController = UIAlertController(title: title, message: \u0026#34;\u0026#34;, preferredStyle: .alert) 6 7 // message style 8 let paragraphStyle = NSMutableParagraphStyle() 9 paragraphStyle.alignment = .left 10 let messageText = NSAttributedString( 11 string: message, 12 attributes: [ 13 NSAttributedString.Key.foregroundColor : UIColor.red, 14 NSAttributedString.Key.font : UIFont.systemFont(ofSize: 14), 15 NSAttributedString.Key.paragraphStyle: paragraphStyle, 16 ] 17 ) 18 alertViewController.setValue(messageText, forKey: \u0026#34;attributedMessage\u0026#34;) 19 20 let doneAction = UIAlertAction(title: \u0026#34;確定\u0026#34;, style: .default) { action in 21 print(\u0026#34;ok\u0026#34;) 22 } 23 24 alertViewController.addAction(doneAction) 25 26 self.present(alertViewController, animated: true, completion: nil) 27} ","date":"Dec 27, 2019","img":"/images/posts/swift_alertcontroller_1.png","permalink":"/posts/ios/swift/alertcontroller_usd/","series":["iOS"],"tags":["Swift","AlertController"],"title":"[Swift]如何使用AlertController"},{"categories":null,"content":"‎「RAISE」是一間虛擬與現實結合的複合式主題餐廳。\n「RAISE」餐廳以LOFT工業風為主体風格，150坪開放式空間。\n「RAISE」會員制模式，只要下載APP，就可即時在任何時間、地點利用手機查詢虛擬帳戶 以及利用遊戲獲得更多的黃金礦石 ! 虛擬黃金礦石可至店兌換餐飲、撲克周邊商品 ! [NEW] 利用遊戲獲得更多的積分換取黃金礦石吧! 免費撲克比賽門票，免費體驗撲克比賽，提供舒適、優質的餐飲服務 ! 咖啡 輕食 下午茶 無國界創意料理。\n示意圖 連結   [AppStore]   [食尚玩家介紹]  ","date":"Dec 31, 2018","img":"/images/icon/app_icon_raise_2018.png","permalink":"/projects/2018/app_raise_game/","series":["iOS"],"tags":["APP","Objective-C"],"title":"Raise遊戲主題餐廳"},{"categories":null,"content":"「豆豆OK」、「Dou Dou OK」App 內皆採會員制模式，下載 App 後必須經過開通程序，就可享受即時地在任何時間、地點利用行動設備查詢虛擬帳戶的訊息與資料。\n示意圖 連結  [AppStore]  ","date":"Dec 31, 2018","img":"/images/icon/app_icon_dou_dou_ok_2018.png","permalink":"/projects/2018/app_dou_dou_ok/","series":["iOS"],"tags":["APP","Objective-C"],"title":"豆豆OK"},{"categories":[],"content":"在做開發的時候，不可能所有功能都自己寫，多少會去參考別人使用的程式function，或者引用Library套件。\n這時候套件管理就是一個很重要的工作，對於多人團隊開發相當重要，不然套件百百種，你要整理還真的很麻煩。\n幸好Cocoa他有開發出一種套件管理的Pods，提供程式設計師，直接從Github即可引用下載至專案。重點是他在會自己引用，在Burild的時候會自己編譯，超方便的！\n套件安裝 step 1 - macOS安裝CocoaPods套件 執行終端機Terminal，安裝Pod套件程式\n1$ sudo gem install cocoapods 安裝需要一點時間，請耐心等候。\nstep 2 - Xcode安裝CocoaPods套件 進入專案資料夾\n1$ cd ‘project demo\u0026#39; 初始化\n1$ pod init  會多一個Podfile檔案\n 1$ pod install 安裝完成，自動增加以下檔案\n  1.Demo.xcworkspance\n  2.Podfile.lock\n  3.Pods Finder\n  step 3 - Xcode使用Pods 開啟 Xcode xcworkspace (往後執行專案，均使用此檔案)\n選擇 Pods \u0026gt; Podfile\nstep 4 - 修改Podfile (ps.可以上Github找尋，在此示範範例為 Alamofire 套件)\n1pod \u0026#39;Alamofire\u0026#39; step 5 - 更新pod 安裝套件，他會自動偵測更新或刪除\n1$ pod install  偵測為更新   偵測為刪除  安裝完畢後，Pods會將套件編譯好放入專案中\n就可以開始使用啦～\n套件移除 CocoaPods套件管理非常的好用，但也因為他都幫你做好的關係，黏著性很強，如果想要移除或者替換其他套件管理方式(例如：Carthage)，沒有完全移除乾淨的話，專案是無法正常執行的。\nStep 1 - Delete pods from file  刪除Pods文件檔案    刪除 .xcworkspace 檔案\n  刪除 Podfile 檔案\n  刪除 Podfile.lock 檔案\n  刪除 Pods 資料夾\n  Step 2 - Delete pods from project  開啟 Demo.xcodeproj   刪除專案參考資料（遺失的項目    刪除 Pods 資料\n  刪除 Frameworkds 資料\n   Targets \u0026gt; Build Phases    刪除 Check Pods Frameworks\n  刪除 Check Pods Manifest.lock\n  刪除 Check Pods Resources\n  移除以上檔案，就可以正常Build了！(撒花\n","date":"Sep 14, 2018","img":"/images/icon/icon_cocoapods.png","permalink":"/posts/xcode/cocoapods_management/","series":["iOS"],"tags":["Swift","CocoaPods","GitHub","Xcode"],"title":"安裝CocoaPods套件管理"},{"categories":[],"content":"iOS的APP icon在規格上要求相當高，如果沒有依照它的格式去弄，是無法完美呈現在APP上的。\n如果將icon規格一一告訴UI，再請他出圖，我相信你很快會被討厭的\u0026hellip;\n有了 MakeAppicon 這個工具之後，往後不用再麻煩UI小姐，你自己也可以把圖片切好。\n準備一張原圖  上面推薦使用 1536x1536 解析度的圖，以壓縮出小Icon     選擇圖片 開始運轉          選擇規格 iOS/Android 很貼心的是，他除了有IOS的規格之外，還可以選擇Android的，依照不同的系統，需要的圖片大小也不同\n iOS規格：1x、2x、3x   Android規格：mdpi(1x)、hdpi(1.5x)、xhdpi(2x)、xxhdpi(3x)、xxhdpi(4x)  完成  成功之後，你可以直接將圖片轉寄至你的mail上面  使用效果  以iOS APP 做為使用 Project \u0026gt; Assets.xcassets  參考  MakeAppicon  裝置大小  ","date":"Sep 14, 2018","img":"","permalink":"/posts/ios/make_app_icon/","series":["iOS"],"tags":["Assets"],"title":"製作iOS APP圖示"},{"categories":[],"content":"安裝 在intel安裝 1/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 在Apple Silicon安裝 m1與install系統架構的目錄不同 主要就是前綴詞加上 arch -x86_64  1arch -x86_64 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026#34; 更新 1brew update \u0026amp;\u0026amp; brew upgrade \u0026amp;\u0026amp; brew cleanup 連結 [Homebrew 官網] ","date":"Jan 1, 2018","img":"","permalink":"/posts/macos/homebrew_install/","series":["macOS"],"tags":[],"title":"Homebrew MacOS套件管理工具"},{"categories":null,"content":"此App僅供本公司之產品「愛秀無線隨身雲」使用 iShowDrive擴充你的手機 平板的儲存容量，無線串流手機裡的照片、音樂、影片、檔案至你的隨身碟，同時多人分享­­、存取，是手機、平板、NB通用的無線隨身碟。\n貢獻  連接GoogleDrive、Dropbox做雲端檔案分享 檔案管理機制(複製/搬移/加密/新增目錄) 新增支援Live Photos原況照片、影片備份 圖片疊加浮水印文字  示意圖 連結   [AppStore]   [官網]  ","date":"Dec 31, 2017","img":"/images/icon/app_icon_ishowdrive_2017.png","permalink":"/projects/2017/app_ishowdrive/","series":["iOS"],"tags":["APP","Objective-C"],"title":"IShowDrive 愛秀無線隨身雲"},{"categories":null,"content":"此App僅供本公司之產品「長保無線安康 智慧保全系統」使用\n長榮警備保全擁有專業的機動保全人員外，更具備了高度安全的防護系統，連結各個末端感知器材，細密的完全規劃，從現場勘查、設計繪圖、報價說明、施工說明到驗收開通，架構起一座座安全橋樑。\n24小時立即有效地偵測安全問題的發生；透過遠端網路監控系統與客戶密切聯繫，隨時以高度機動保全人力，迅速處理各種緊急事件，並快速會同警方或相關單位做最妥善的服務，確保客戶安全。為了鞏固安全網路，加強點與點之間的安全連線，長榮警備保全雙向管制中心，以精良的科技設備、高效率的機動人員，時時刻刻做好安全的第一防護！大型電腦後端系統整合\u0026hellip;\n擔任保全系統開發的APP項目負責人，參與系統規劃與設計，並負責iOS/Android APP、WebAPI之軟體開發。\n貢獻   撰寫SA/SD系統開發文件，帶領APP團隊合作，加速開發作業。\n  利用空餘時間學習Swift，第一個完成公司iOS APP開發，達成APP雙系統的設計。\n  設計Server頒發Token令牌，並將資料做SHA-256雜湊值簽章，防止擷取封包串改，確保資料完整性。\n  將影片檔轉為RTSP即時串流資源，不受讀取速度影響，可即時播放影片。\n  Google Map API V3：地圖路徑規劃。\n  使用MQTT輕量的通訊協定，避免第三方推播服務造成資料洩漏。\n  Swagger套件：輸出Markdown所撰寫的API文件。\n  Fortify原碼檢測：修正程式的安全漏洞，避免嚴重資安問題的發生。\n  示意圖 客戶專用APP 連結   [長榮警被保全 官網]   [GooglePlay]   [AppStore]  ","date":"Jun 30, 2016","img":"/images/icon/app_icon_evergreen_2017.png","permalink":"/projects/2017/app_evergreen_wireless/","series":["iOS","Android"],"tags":["APP","Java","WebAPI","Swift"],"title":"長榮警備保全系統"},{"categories":null,"content":"在金融科技與線上支付的趨勢下，越來越多投資人，選擇在網路上完成一切理財服務，而非走入實體銀行去做理財規劃，因為網路相對成本較低，不會被收取額外諮詢費與手續費，也少了皮鞋成本。\n貢獻  原本客戶的基金投組演算都是使用Excel做處理，需將其演算法做成模組化，並將數據資料做即時運算。 製作Windows Form，定時處理.csv基金歷史資料，轉換寫入至SQL資料庫。 使用Telerik套件，顯示圖形化介面，包括：曲線圖、折線圖、圓餅圖、雷達圖等。  示意圖 基金查詢 基金評等 基金模擬 基金雷達 基金健檢 分析報告 連結 [南部科學園區 創業工坊] ","date":"Apr 30, 2016","img":"/images/icon/app_icon_ncku_fundray_2016.png","permalink":"/projects/2016/web_ncku_fundray/","series":[],"tags":["WebFrom","C#"],"title":"NCKU 基金投資理財平台 FundRay"},{"categories":null,"content":"高雄市交通局發行之智慧型手機軟體「高雄任我行」，以地圖及幹道顯示模式提供高雄市內即時交通資訊(包含:路口影像、事件資訊、路段績效)之查詢。\n本軟體包含下列功能：\n 最新消息與即時交通資訊 提供路口即時影像觀看 提供公車即時動態查詢與公車站點到站查尋 提供施工及事故事件資訊 提供道路路段績效 地圖/幹道雙顯示模式 智慧運輸走廊資訊 我的最愛功能(可加入常用即時影像,公車站點,捷運站點,公共自行車站點） 捷運票價查詢與搭乘時間查詢 公共自行車格位數查詢 公營民營停車場資訊查詢 路邊停車費用查詢 車輛拖吊資訊查詢 台鐵時刻查詢 高鐵時刻查詢 計程車相關資訊 公車站點預約推播功能 使用者事件回報專區 輕軌路口影像與事件專區  備註:相關公共交通運輸資訊為外單位介接資料如有異動請依照相關單位資訊為主，謝謝\n貢獻  取得政府資料開放平台資訊，包括：台鐵、高鐵時刻表、高雄捷運、自行車、公車、停車場等動態資訊。 Google Map API V2：定位並搜尋出300m、500m、1km等區域範圍的特定內容，並客製化Map Info顯示多樣資訊。 即時播放CCTV監視器影像。  示意圖 連結   [GooglePlay]   [高雄任我行 通行高雄順暢行]  ","date":"Dec 15, 2013","img":"/images/icon/app_icon_tbkc_2013.png","permalink":"/projects/2013/app_tbkc_traffic_route/","series":["Android"],"tags":["APP","Java"],"title":"高雄任我行"},{"categories":null,"content":"「蒲公英TV 影音系統」連上網路即可觀看各類電視、電影等影視。出差在外、居家旅行必備聖品。\nps.此APP軟體安裝於Android系統的電視盒\n工作項目   檢視原始程式碼，製作規格文件。\n  JD-GUI反編譯：解析原始碼，將大陸的直播APP資訊作為參考。\n  擷取封包資訊：取得APP所發送的封包數據，解析API來源與參數設定。\n  VLC SDK：客製化UI 影音播放器界面。\n  Grid View修改演算法參數，製作3D旋轉效果，提供影片目錄瀏覽。\n ","date":"Jun 18, 2013","img":"/images/icon/app_icon_dandelion_tv_2013.png","permalink":"/projects/2013/app_dandelion_tv/","series":["Android"],"tags":["APP","Java"],"title":"蒲公英TV"},{"categories":null,"content":"此APP是以「金礦咖啡」做為設計範例，模擬互動式點餐APP，結合後台POS系統，由APP定位搜尋附近之店家，發送訂購餐點後，後台接收到資訊開始製作，顧客至預定店家出示QRcode取餐。\n系統架構 ASP.NET + SQL Server  ERP後台資料管理(會員管理、產品管理、訂單管理) Ajax 動態更新畫  Android APP  Google Map QR Code GridView 廣告  示意圖 ","date":"Apr 2, 2013","img":"/images/icon/app_icon_crown_fancy_2013.png","permalink":"/projects/2013/app_crown_fancy/","series":["Android"],"tags":["APP","Java"],"title":"金礦咖啡 訂餐APP"}]